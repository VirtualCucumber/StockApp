{"version":3,"sources":["services/Helper.js","pages/Home.js","components/BoxProperty.js","components/BoxBody.js","components/ListItem.js","components/ChartLineComparison.js","pages/Dashboard.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Helper","array","newSize","divisibleAmount","length","newArray","newIndex","index","name","time","dateFormat","stockTime","stockLimit","axios","get","result","response","data","price","this","shrinkArray","moment","fromNow","format","Home","props","handleStockInput","e","setState","stockInput","target","value","handleSubmit","preventDefault","getData","state","isLoading","formText","helper","limit","handleStockData","history","push","className","Form","onSubmit","InputGroup","size","FormControl","onChange","placeholder","aria-label","aria-describedby","Spinner","animation","style","color","Component","BoxProperty","title","subtitle","BoxBody","Dropdown","flex","textAlign","Toggle","variant","id","icon","Menu","Item","onClick","handleStockTime","children","ListItem","Button","clickHandler","ChartLineComparison","console","log","chartTime","addComparedStock","chartReference","comparedStocks","newData","concat","newDatasetIndex","newDataset","label","lineTension","borderColor","pointBackgroundColor","pointHitRadius","pointBorderWidth","fill","borderDash","pointRadius","pointHoverRadius","chartInstance","config","datasets","update","stock","removeComparedStockIndex","slice","dataset","removeChartDatasetIndex","map","key","removeComparedStock","Row","Col","md","renderComparedStocks","ref","reference","height","labels","stockData","options","responsive","maintainAspectRatio","display","text","fontSize","legend","position","tooltips","mode","intersect","hover","Dashboard","getNewStockData","setChartTime","symbol","compareChartData","child","React","createRef","test","current","removeAllComparedStock","newTimeData","Container","currentPrice","onTimeChange","Main","isDataLoading","exact","path","render","library","add","fab","faCheckSquare","faCoffee","faBars","faChartArea","faChartPie","faSearch","faPlus","faTimes","faDollarSign","faCalendarAlt","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.44ace576.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\nimport moment from 'moment';\r\n\r\nconst API = 'https://two-guys-with-computers.herokuapp.com';\r\n\r\nexport default class Helper {\r\n    \r\n    shrinkArray(array, newSize) {\r\n        let divisibleAmount = array.length / newSize;\r\n        let newArray = [];\r\n        let newIndex = 0;\r\n\r\n        if(array.length != newSize) {\r\n            for (let index = 0; index < array.length; index++) {\r\n                if(index % divisibleAmount == 0) {\r\n                    newArray[newIndex] = array[index];\r\n                    newIndex++;\r\n                }\r\n            }\r\n        } else {\r\n            // Just return the original array\r\n            newArray = array;\r\n        }\r\n\r\n        return newArray;\r\n    }\r\n\r\n    async getData(name, time) {\r\n\r\n        \r\n        let dateFormat = 'LLLL';\r\n        if(time === 'day') { dateFormat = 'dddd' }\r\n        if(time === 'month') { dateFormat = 'MMMM' }\r\n        if(time === 'annual') { dateFormat = 'MMMM' }\r\n\r\n        let stockTime = time;\r\n        let stockLimit = 12;\r\n        if(time === 'month') {\r\n            stockTime = 'day';\r\n            stockLimit = 252;\r\n        }\r\n        \r\n        let response;        \r\n        try {\r\n            const result = await axios.get(API + `/stock/${name}/${stockTime}/${stockLimit}`);\r\n            response = result.data;\r\n            response.price = this.shrinkArray(response.price, 12);\r\n            response.time = this.shrinkArray(response.time, 12);\r\n            for (let index = 0; index < response.time.length; index++) {\r\n                if(time === 'minute') { \r\n                    response.time[index] = moment(response.time[index]).fromNow(); \r\n                } else {\r\n                    response.time[index] = moment(response.time[index]).format(dateFormat);\r\n                }\r\n            }\r\n            //return response;\r\n        } catch (error) {\r\n            \r\n        }\r\n        \r\n        //this.props.handleStockData(response);\r\n\r\n        return response;\r\n    }\r\n\r\n}","import React, { Component } from 'react';\r\nimport { Form, FormControl, InputGroup, Spinner } from 'react-bootstrap';\r\nimport StockData from '../services/StockData';\r\nimport axios from'axios';\r\nimport moment from 'moment';\r\nimport Helper from '../services/Helper';\r\n\r\nexport default class Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stockInput: '',\r\n            isLoading: false,\r\n            formText: ''\r\n        }\r\n\r\n        this.helper = new Helper();\r\n    }\r\n\r\n    handleStockInput = (e) => {\r\n        this.setState({ stockInput: e.target.value });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        // Prevents HTML from refreshing page\r\n        e.preventDefault();\r\n        this.getData(this.state.stockInput, 'minute', 12);\r\n        // Reset input field\r\n        this.setState({ stockInput: '' });\r\n    }\r\n\r\n    async getData(name, time, limit) {\r\n        this.setState({ isLoading:true })\r\n\r\n        let dateFormat = 'LLLL';\r\n        if(time === 'day') { dateFormat = 'dddd' }\r\n        if(time === 'month') { dateFormat = 'MMMM' }\r\n        if(time === 'annual') { dateFormat = 'MMMM' }\r\n        \r\n        let response;        \r\n        try {\r\n            const result = await axios.get('https://two-guys-with-computers.herokuapp.com' + `/stock/${name}/${time}/${limit}`);\r\n            response = result.data;\r\n            response.price = this.helper.shrinkArray(response.price, 12);\r\n            response.time = this.helper.shrinkArray(response.time, 12);\r\n            for (let index = 0; index < response.time.length; index++) {\r\n                if(time === 'minute') { \r\n                    response.time[index] = moment(response.time[index]).fromNow(); \r\n                } else {\r\n                    response.time[index] = moment(response.time[index]).format(dateFormat);\r\n                }\r\n            }\r\n            this.setState({ isLoading: false });\r\n            this.props.handleStockData(response);\r\n            this.props.history.push('/dashboard');\r\n        } catch (error) {\r\n            this.setState({ formText: 'Incorrect stock symbol. Try again with caps', isLoading: false });\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='App-header'>\r\n                <h1 className='App-title'>Stock Search</h1>\r\n                <Form onSubmit={this.handleSubmit} >\r\n                    <InputGroup size=\"lg\">\r\n                    <FormControl \r\n                        value={this.state.stockInput} \r\n                        onChange={this.handleStockInput} \r\n                        placeholder='Symbols only...'\r\n                        aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-sm\" \r\n                    />\r\n                    </InputGroup>\r\n                </Form>\r\n                <div className='mt-2'>\r\n                    {this.state.isLoading ? <Spinner size='md' animation=\"border\" /> : <span style={{color: 'red'}}><small>{this.state.formText}</small></span>}\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nconst BoxProperty = props => {\r\n\r\n    return (\r\n        <div className='box box-property'>\r\n            <h3>{props.title}</h3>\r\n            <p>{props.subtitle}</p>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BoxProperty\r\n","import React from 'react';\r\nimport { Dropdown } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst BoxBody = props => {\r\n\r\n    return (\r\n        <div className='box box-body'>\r\n            <div className='box-title'>\r\n                <h3>{props.title}</h3>\r\n                <Dropdown style={{ flex:1, textAlign:'right' }}>\r\n                    <Dropdown.Toggle variant=\"info\" id=\"dropdown-basic\">\r\n                        <FontAwesomeIcon icon='calendar-alt' />\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item onClick={() => props.handleStockTime('minute')} >Minute</Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => props.handleStockTime('day')} >Day</Dropdown.Item>\r\n                        <Dropdown.Item onClick={() => props.handleStockTime('month')} >Month</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </div>\r\n            <div className='box-content'>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BoxBody\r\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst ListItem = props => {\r\n    return ( \r\n        <div className='list-item'>\r\n            <div className='list-item-title'>\r\n                <span>{props.title}</span>\r\n            </div>\r\n            <div className='list-item-btn'>\r\n            <Button onClick={props.clickHandler} variant=\"danger\" size=\"lg\">\r\n                <FontAwesomeIcon icon='times' />\r\n            </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem;\r\n","import React, { Component } from 'react';\r\nimport { Container, Row, Col, Button, Form, FormControl, InputGroup, Spinner} from 'react-bootstrap';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport ListItem from './ListItem';\r\nimport axios from 'axios';\r\nimport Helper from '../services/Helper';\r\n\r\nexport default class ChartLineComparison extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            chartReference: {},\r\n            comparedStocks: [],\r\n            stockInput: '',\r\n            chartTime: props.chartTime,\r\n            isLoading: false\r\n        }\r\n\r\n        this.helper = new Helper();\r\n    }\r\n\r\n    handleStockInput = (e) => {\r\n        this.setState({ stockInput: e.target.value });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        // Prevents HTML from refreshing page\r\n        e.preventDefault();\r\n        console.log(this.props.chartTime);\r\n        this.addComparedStock(this.state.stockInput, this.props.chartTime);\r\n        // Reset input field\r\n        this.setState({ stockInput: '' });\r\n    }\r\n\r\n    async addComparedStock(name, time) {\r\n        this.setState({ isLoading:true });\r\n\r\n        let newData = await this.helper.getData(name, 'minute');\r\n        \r\n        this.setState({\r\n            comparedStocks: this.state.comparedStocks.concat(newData)\r\n        });\r\n\r\n        let newDatasetIndex = this.state.comparedStocks.length;\r\n        let newDataset = {\r\n            label:this.state.comparedStocks[newDatasetIndex-1].name,\r\n            data:this.state.comparedStocks[newDatasetIndex-1].price,\r\n            lineTension: 0,\r\n            borderColor: \"rgb(255, 99, 132)\",\r\n            pointBackgroundColor: \"rgb(255, 99, 132)\",\r\n            pointHitRadius: 50,\r\n            pointBorderWidth: 2,\r\n            fill: false,\r\n            borderDash: [5, 5],\r\n            pointRadius: 5,\r\n            pointHoverRadius: 10,\r\n        }\r\n        this.chartReference.chartInstance.config.data.datasets.push(newDataset);\r\n\r\n        this.chartReference.chartInstance.update();\r\n\r\n        this.setState({ isLoading:false });\r\n    }\r\n\r\n    removeComparedStock(index) {\r\n        let stock = this.state.comparedStocks;\r\n        const removeComparedStockIndex = stock.slice(0, index).concat(stock.slice(index + 1, stock.length));\r\n        this.setState({\r\n            comparedStocks: removeComparedStockIndex\r\n        });\r\n        let dataset = this.chartReference.chartInstance.config.data.datasets;\r\n        const removeChartDatasetIndex = dataset.slice(0, index+1).concat(dataset.slice(index + 2, dataset.length));\r\n        this.chartReference.chartInstance.config.data.datasets = removeChartDatasetIndex;\r\n        this.chartReference.chartInstance.update();\r\n    }\r\n\r\n    removeAllComparedStock() {\r\n        this.setState({ comparedStocks: [] });\r\n    }\r\n\r\n    renderComparedStocks() {\r\n        return this.state.comparedStocks.map((comparedStocks, index) => {\r\n            return(\r\n                <ListItem key={index}\r\n                title={comparedStocks.name}\r\n                index={index}\r\n                clickHandler={() =>this.removeComparedStock(index)}\r\n                />\r\n            )\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            \r\n            <Row>\r\n                <Col md={3}>\r\n                    <Form onSubmit={this.handleSubmit} >\r\n                        <InputGroup size=\"sm\">\r\n                        <FormControl \r\n                            value={this.state.stockInput} \r\n                            onChange={this.handleStockInput} \r\n                            placeholder='Compare with other stock...'\r\n                            aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-sm\" \r\n                        />\r\n                        </InputGroup>\r\n                    </Form>\r\n                    {this.state.isLoading ? <Spinner size='sm' animation=\"border\" /> : ''}\r\n                    {this.renderComparedStocks()}\r\n                </Col>\r\n                <Col md={9}>\r\n                    <Line ref={(reference) => this.chartReference = reference }\r\n                        height={300}\r\n                        data={{\r\n                            labels:this.props.stockData.time,\r\n                            datasets: [\r\n                                {\r\n                                    label:this.props.stockData.name,\r\n                                    data:this.props.stockData.price,\r\n                                    lineTension: 0,\r\n                                    borderColor: \"rgb(255, 99, 132)\",\r\n                                    pointBackgroundColor: \"rgb(255, 99, 132)\",\r\n                                    pointHitRadius: 50,\r\n                                    pointBorderWidth: 2,\r\n                                    fill: false,\r\n                                    borderDash: [5, 5],\r\n                                    pointRadius: 5,\r\n                                    pointHoverRadius: 10,\r\n                                }\r\n                            ]\r\n                        }}\r\n                        options={{\r\n                            responsive:true,\r\n                            maintainAspectRatio:false,\r\n                            title:{\r\n                                display:false,\r\n                                text:'Apple',\r\n                                fontSize:25\r\n                                },\r\n                                legend:{\r\n                                display:false,\r\n                                position:'right'\r\n                                },\r\n                                tooltips: {\r\n                                mode: 'index',\r\n                                intersect: false,\r\n                                },\r\n                                hover: {\r\n                                    mode: 'nearest',\r\n                                    intersect: true\r\n                                }\r\n                        }}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container, Row, Col, Form, FormControl, InputGroup, Spinner } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport BoxProperty from '../components/BoxProperty';\r\nimport BoxBody from '../components/BoxBody';\r\nimport ChartLineComparison from '../components/ChartLineComparison';\r\nimport moment from 'moment';\r\nimport Helper from '../services/Helper';\r\n\r\nexport default class Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stockInput: props.stockData.symbol,\r\n            compareChartData: props.stockData,\r\n            chartTime: 'minute'\r\n        }\r\n\r\n        this.child = React.createRef();\r\n        this.helper = new Helper();\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.stockData.name);\r\n        if(typeof this.props.stockData.name == 'undefined') {\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    handleStockInput = (e) => {\r\n        this.setState({ stockInput: e.target.value });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        // Prevents HTML from refreshing page\r\n        e.preventDefault();\r\n        this.getNewStockData(this.state.stockInput, 'minute');\r\n        // Reset input field\r\n        this.setState({ stockInput: '' });\r\n    }\r\n\r\n    handleStockTime = (time) => {\r\n        this.setChartTime(time)\r\n    }\r\n\r\n    async getNewStockData(name,time) {\r\n        this.setState({ isLoading: true });\r\n        const test = await this.helper.getData(name,time);\r\n        this.props.handleStockData(test);\r\n        this.setState({\r\n            compareChartData: test,\r\n            chartTime: time,\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    async setChartTime(time) {\r\n        this.setState({ isLoading: true });\r\n        this.child.current.removeAllComparedStock();\r\n        let newTimeData = await this.helper.getData(this.props.stockData.symbol, time);\r\n        this.setState({\r\n            compareChartData: newTimeData,\r\n            chartTime: time,\r\n            isLoading: false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='dashboard-header'>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md={12}>\r\n                                <div className='dashboard-header-content'>\r\n                                    <Form onSubmit={this.handleSubmit} >\r\n                                        <InputGroup size=\"lg\">\r\n                                        <FormControl \r\n                                            value={this.state.stockInput} \r\n                                            onChange={this.handleStockInput} \r\n                                            aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-sm\" \r\n                                        />\r\n                                        </InputGroup>\r\n                                    </Form>\r\n                                    <div className='mt-2'>\r\n                                        {this.state.isLoading ? <Spinner size='md' animation=\"border\" /> : ''}\r\n                                    </div>\r\n                                    <h1><strong>{this.props.stockData.name}</strong></h1>\r\n                                    <div className='properties'>\r\n                                        <BoxProperty title={this.props.stockData.currentPrice} subtitle={'PRICE'} />\r\n                                        <BoxProperty title={'54.02'} subtitle={'HIGH'} />\r\n                                        <BoxProperty title={'44.45'} subtitle={'LOW'} />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n                <div className='chart-comparison'>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md={12}>\r\n                                <BoxBody title={'Chart'} handleStockTime={this.handleStockTime} >\r\n                                    <ChartLineComparison \r\n                                        onTimeChange={this.onTimeChange} \r\n                                        stockData={this.state.compareChartData} \r\n                                        chartTime={this.state.chartTime}\r\n                                        ref={this.child}\r\n                                    />\r\n                                </BoxBody>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Home from '../pages/Home';\r\nimport Dashboard from '../pages/Dashboard';\r\nimport moment from 'moment';\r\nimport Helper from '../services/Helper';\r\n\r\nexport default class Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stockData: {},\r\n            isDataLoading: false\r\n        }\r\n\r\n        this.helper = new Helper();\r\n    }\r\n\r\n    /*\r\n    * Handler for retrieving stock data.\r\n    * Gets passed down to the component that has the stock input\r\n    * field and once sumbitted, the data will get passed back up\r\n    * to our Main component.\r\n    * \r\n    * This method lets up pass data back up the chain of components\r\n    * so we can globalize the variable so all components can access\r\n    * it.\r\n    */\r\n    handleStockData = (data) => {\r\n\r\n        this.setState({\r\n            stockData: data\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='App'>\r\n                <Switch>\r\n                    <Route \r\n                        exact path=\"/\" \r\n                        render={props => (\r\n                            <Home {...props} handleStockData={this.handleStockData}  />\r\n                        )}\r\n                    />\r\n                    <Route \r\n                        exact path=\"/dashboard\" \r\n                        render={props => (\r\n                            <Dashboard {...props} handleStockData={this.handleStockData} stockData={this.state.stockData} />\r\n                        )}\r\n                    />\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport Main from './components/Main';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faCheckSquare, faCoffee , faBars, faChartArea, faChartPie, faSearch, faPlus, faTimes, faDollarSign, faCalendarAlt} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(fab, faCheckSquare, faCoffee, faBars, faChartArea, faChartPie, faSearch, faPlus, faTimes, faDollarSign, faCalendarAlt);\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n        <Router> \n        <App /> \n        </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}