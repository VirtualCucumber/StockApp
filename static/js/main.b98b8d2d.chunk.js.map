{"version":3,"sources":["pages/Home.js","components/BoxProperty.js","components/BoxBody.js","components/ListItem.js","components/ChartLineComparison.js","pages/Dashboard.js","components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","handleStockInput","e","setState","stockInput","target","value","handleSubmit","preventDefault","getData","state","hits","isLoading","name","this","axios","get","result","response","data","error","handleStockData","history","push","className","Form","onSubmit","InputGroup","size","FormControl","onChange","aria-label","aria-describedby","Component","BoxProperty","title","subtitle","BoxBody","Dropdown","style","flex","textAlign","Toggle","variant","id","icon","Menu","Item","href","children","ListItem","Button","onClick","clickHandler","ChartLineComparison","addComparedStock","chartReference","comparedStocks","concat","index","console","log","stock","filteredItems","slice","length","map","key","removeComparedStock","Row","Col","md","placeholder","renderComparedStocks","height","labels","stockData","time","datasets","label","price","lineTension","borderColor","pointBackgroundColor","pointHitRadius","pointBorderWidth","fill","borderDash","pointRadius","pointHoverRadius","options","responsive","maintainAspectRatio","display","text","fontSize","legend","position","tooltips","mode","intersect","hover","Dashboard","symbol","Container","Main","moment","format","isDataLoading","exact","path","render","library","add","fab","faCheckSquare","faCoffee","faBars","faChartArea","faChartPie","faSearch","faPlus","faTimes","faDollarSign","faCalendarAlt","App","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.b98b8d2d.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Form, FormControl, InputGroup } from 'react-bootstrap';\r\nimport StockData from '../services/StockData';\r\nimport axios from'axios';\r\n\r\nexport default class Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stockInput: '',\r\n            hits: {},\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    handleStockInput = (e) => {\r\n        this.setState({ stockInput: e.target.value });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        // Prevents HTML from refreshing page\r\n        e.preventDefault();\r\n        this.getData(this.state.stockInput);\r\n        // Reset input field\r\n        this.setState({ stockInput: '' });\r\n    }\r\n\r\n    async getData(name) {\r\n        this.setState({ isLoading:true })\r\n        \r\n        let response;        \r\n        try {\r\n            const result = await axios.get('https://two-guys-with-computers.herokuapp.com' + `/stock/${name}/minute/10`);\r\n            response = result.data;\r\n            this.setState({ hits: result, isLoading: false });\r\n        } catch (error) {\r\n            this.setState({ error, isLoading: false });\r\n        }\r\n        \r\n        this.props.handleStockData(response);\r\n        this.props.history.push('/dashboard');\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='App-header'>\r\n                <h1 className='App-title'>Stock Search</h1>\r\n                <Form onSubmit={this.handleSubmit} >\r\n                    <InputGroup size=\"lg\">\r\n                    <FormControl \r\n                        value={this.state.stockInput} \r\n                        onChange={this.handleStockInput} \r\n                        aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-sm\" \r\n                    />\r\n                    </InputGroup>\r\n                </Form>\r\n                {this.state.isLoading ? <p>Loading...</p> : ''}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\r\n\r\nconst BoxProperty = props => {\r\n\r\n    return (\r\n        <div className='box box-property'>\r\n            <h3>{props.title}</h3>\r\n            <p>{props.subtitle}</p>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BoxProperty\r\n","import React from 'react';\r\nimport { Dropdown } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst BoxBody = props => {\r\n\r\n    return (\r\n        <div className='box box-body'>\r\n            <div className='box-title'>\r\n                <h3>{props.title}</h3>\r\n                <Dropdown style={{ flex:1, textAlign:'right' }}>\r\n                    <Dropdown.Toggle variant=\"info\" id=\"dropdown-basic\">\r\n                        <FontAwesomeIcon icon='calendar-alt' />\r\n                    </Dropdown.Toggle>\r\n\r\n                    <Dropdown.Menu>\r\n                        <Dropdown.Item href=\"#/action-1\">Minute</Dropdown.Item>\r\n                        <Dropdown.Item href=\"#/action-2\">Day</Dropdown.Item>\r\n                        <Dropdown.Item href=\"#/action-3\">Month</Dropdown.Item>\r\n                        <Dropdown.Item href=\"#/action-3\">Annual</Dropdown.Item>\r\n                    </Dropdown.Menu>\r\n                </Dropdown>\r\n            </div>\r\n            <div className='box-content'>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default BoxBody\r\n","import React from 'react';\r\nimport { Button } from 'react-bootstrap';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\n\r\nconst ListItem = props => {\r\n    return (\r\n        <div className='list-item'>\r\n            <div className='list-item-title'>\r\n                <span>{props.title}</span>\r\n            </div>\r\n            <div className='list-item-btn'>\r\n            <Button onClick={props.clickHandler} variant=\"danger\" size=\"lg\">\r\n                <FontAwesomeIcon icon='times' />\r\n            </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ListItem;\r\n","import React, { Component } from 'react';\r\nimport { Container, Row, Col, Button, Form, FormControl, InputGroup, Card} from 'react-bootstrap';\r\nimport { Line } from 'react-chartjs-2';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport ListItem from './ListItem';\r\nimport axios from 'axios';\r\n\r\nexport default class ChartLineComparison extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            chartReference: {},\r\n            comparedStocks: [],\r\n            stockInput: '',\r\n            isLoading: false\r\n        }\r\n    }\r\n\r\n    handleStockInput = (e) => {\r\n        this.setState({ stockInput: e.target.value });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        // Prevents HTML from refreshing page\r\n        e.preventDefault();\r\n        this.addComparedStock(this.state.stockInput);\r\n        // Reset input field\r\n        this.setState({ stockInput: '' });\r\n    }\r\n\r\n    async addComparedStock(name) {\r\n        this.setState({ isLoading:true })\r\n        \r\n        let response;        \r\n        try {\r\n            const result = await axios.get('https://two-guys-with-computers.herokuapp.com' + `/stock/${name}/minute/10`);\r\n            response = result.data;\r\n            this.setState({ hits: result, isLoading: false });\r\n        } catch (error) {\r\n            this.setState({ error, isLoading: false });\r\n        }\r\n        \r\n        this.setState({\r\n            comparedStocks: this.state.comparedStocks.concat(response)\r\n        });\r\n    }\r\n\r\n    removeComparedStock(index) {\r\n        console.log('ran');\r\n        let stock = this.state.comparedStocks;\r\n        const filteredItems = stock.slice(0, index).concat(stock.slice(index + 1, stock.length));\r\n        this.setState({\r\n            comparedStocks: filteredItems\r\n        });\r\n    }\r\n\r\n    renderComparedStocks() {\r\n        return this.state.comparedStocks.map((comparedStocks, index) => {\r\n            return(\r\n                <ListItem key={index}\r\n                title={comparedStocks.name}\r\n                index={index}\r\n                clickHandler={() =>this.removeComparedStock(index)}\r\n                />\r\n            )\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Row>\r\n                <Col md={3}>\r\n                    <Form onSubmit={this.handleSubmit} >\r\n                        <InputGroup size=\"sm\">\r\n                        <FormControl \r\n                            value={this.state.stockInput} \r\n                            onChange={this.handleStockInput} \r\n                            placeholder='Compare with other stock...'\r\n                            aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-sm\" \r\n                        />\r\n                        </InputGroup>\r\n                    </Form>\r\n                    {this.renderComparedStocks()}\r\n                </Col>\r\n                <Col md={9}>\r\n                    <Line\r\n                        height={300}\r\n                        data={{\r\n                            labels:this.props.stockData.time,\r\n                            datasets: [\r\n                                {\r\n                                    label:this.props.stockData.name,\r\n                                    data:this.props.stockData.price,\r\n                                    lineTension: 0,\r\n                                    borderColor: \"rgb(255, 99, 132)\",\r\n                                    pointBackgroundColor: \"rgb(255, 99, 132)\",\r\n                                    pointHitRadius: 50,\r\n                                    pointBorderWidth: 2,\r\n                                    fill: false,\r\n                                    borderDash: [5, 5],\r\n                                    pointRadius: 5,\r\n                                    pointHoverRadius: 10,\r\n                                }\r\n                            ]\r\n                        }}\r\n                        options={{\r\n                            responsive:true,\r\n                            maintainAspectRatio:false,\r\n                            title:{\r\n                                display:false,\r\n                                text:'Apple',\r\n                                fontSize:25\r\n                                },\r\n                                legend:{\r\n                                display:false,\r\n                                position:'right'\r\n                                },\r\n                                tooltips: {\r\n                                mode: 'index',\r\n                                intersect: false,\r\n                                },\r\n                                hover: {\r\n                                    mode: 'nearest',\r\n                                    intersect: true\r\n                                }\r\n                        }}\r\n                    />\r\n                </Col>\r\n            </Row>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Container, Row, Col, Form, FormControl, InputGroup } from 'react-bootstrap';\r\nimport axios from 'axios';\r\nimport BoxProperty from '../components/BoxProperty';\r\nimport BoxBody from '../components/BoxBody';\r\nimport ChartLineComparison from '../components/ChartLineComparison';\r\n\r\nexport default class Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stockInput: props.stockData.symbol\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.stockData.name);\r\n        if(typeof this.props.stockData.name == 'undefined') {\r\n            this.props.history.push('/');\r\n        }\r\n    }\r\n\r\n    handleStockInput = (e) => {\r\n        this.setState({ stockInput: e.target.value });\r\n    }\r\n\r\n    handleSubmit = (e) => {\r\n        // Prevents HTML from refreshing page\r\n        e.preventDefault();\r\n        this.getData(this.state.stockInput);\r\n        // Reset input field\r\n        this.setState({ stockInput: '' });\r\n    }\r\n\r\n    async getData(name) {\r\n        this.setState({ isLoading:true })\r\n        \r\n        let response;        \r\n        try {\r\n            const result = await axios.get('https://two-guys-with-computers.herokuapp.com' + `/stock/${name}/minute/10`);\r\n            response = result.data;\r\n            this.setState({ hits: result, isLoading: false });\r\n        } catch (error) {\r\n            this.setState({ error, isLoading: false });\r\n        }\r\n        \r\n        this.props.handleStockData(response);\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <div className='dashboard-header'>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md={12}>\r\n                                <div className='dashboard-header-content'>\r\n                                    <Form onSubmit={this.handleSubmit} >\r\n                                        <InputGroup size=\"lg\">\r\n                                        <FormControl \r\n                                            value={this.state.stockInput} \r\n                                            onChange={this.handleStockInput} \r\n                                            aria-label=\"Large\" aria-describedby=\"inputGroup-sizing-sm\" \r\n                                        />\r\n                                        </InputGroup>\r\n                                    </Form>\r\n                                    {this.state.isLoading ? <p>Loading...</p> : ''}\r\n                                    <h1><strong>{this.props.stockData.name}</strong></h1>\r\n                                    <div className='properties'>\r\n                                        <BoxProperty title={'^33.2'} subtitle={'PRICE'} />\r\n                                        <BoxProperty title={'^33.2'} subtitle={'PRICE'} />\r\n                                        <BoxProperty title={'^33.2'} subtitle={'PRICE'} />\r\n                                    </div>\r\n                                </div>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n                <div className='chart-comparison'>\r\n                    <Container>\r\n                        <Row>\r\n                            <Col md={12}>\r\n                                <BoxBody title={'Chart'} >\r\n                                    <ChartLineComparison stockData={this.props.stockData} />\r\n                                </BoxBody>\r\n                            </Col>\r\n                        </Row>\r\n                    </Container>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { Route, Switch } from 'react-router-dom';\r\nimport Home from '../pages/Home';\r\nimport Dashboard from '../pages/Dashboard';\r\nimport moment from 'moment';\r\n\r\nexport default class Main extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            stockData: {},\r\n            isDataLoading: false\r\n        }\r\n    }\r\n\r\n    /*\r\n    * Handler for retrieving stock data.\r\n    * Gets passed down to the component that has the stock input\r\n    * field and once sumbitted, the data will get passed back up\r\n    * to our Main component.\r\n    * \r\n    * This method lets up pass data back up the chain of components\r\n    * so we can globalize the variable so all components can access\r\n    * it.\r\n    */\r\n    handleStockData = (data) => {\r\n\r\n        // Convert time format to the day\r\n        for (let index = 0; index < data.time.length; index++) {\r\n            data.time[index] = moment(data.time[index]).format('dddd');\r\n        }\r\n\r\n        this.setState({\r\n            stockData: data\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='App'>\r\n                <Switch>\r\n                    <Route \r\n                        exact path=\"/\" \r\n                        render={props => (\r\n                            <Home {...props} handleStockData={this.handleStockData}  />\r\n                        )}\r\n                    />\r\n                    <Route \r\n                        exact path=\"/dashboard\" \r\n                        render={props => (\r\n                            <Dashboard {...props} handleStockData={this.handleStockData} stockData={this.state.stockData} />\r\n                        )}\r\n                    />\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React from 'react';\nimport Main from './components/Main';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\n\nimport { library } from '@fortawesome/fontawesome-svg-core'\nimport { fab } from '@fortawesome/free-brands-svg-icons'\nimport { faCheckSquare, faCoffee , faBars, faChartArea, faChartPie, faSearch, faPlus, faTimes, faDollarSign, faCalendarAlt} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(fab, faCheckSquare, faCoffee, faBars, faChartArea, faChartPie, faSearch, faPlus, faTimes, faDollarSign, faCalendarAlt);\n\nfunction App() {\n  return (\n    <Main />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { HashRouter as Router } from \"react-router-dom\";\n\nReactDOM.render(\n        <Router> \n        <App /> \n        </Router>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}